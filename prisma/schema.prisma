// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        


model User {
  id             Int      @id @default(autoincrement())
  username       String   @unique
  email          String   @unique
  passwordHash   String?
  bio            String?  
  profilePicture String?
  contact        String?  @db.Char(10)
  role      String   @default("member")
  createdAt      DateTime @default(now())
  updatedAt DateTime @updatedAt
  accounts      Account[]
  posts    Post[]
  comments Comment[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?  

  posts Post[]
}

model Post {
  id         Int      @id @default(autoincrement())
  title      String  
  content    String  
  image      String?  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     Int
  categoryId Int?
  like       Int @default(0) // เพิ่ม
  status     Boolean @default(false) // ไม่อนุมัติ

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  comments   Comment[]
  //tags       Tag[]    @relation("PostTags", references: [id])
  tags  PostTags[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String  
  createdAt DateTime @default(now())
  postId    Int
  userId    Int
  like       Int @default(0) // เพิ่ม

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique
  used  Int    @default(0)

  //posts Post[] @relation("PostTags", references: [id])
  posts  PostTags[]
}

model PostTags {
  postId Int
  tagId  Int

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
}